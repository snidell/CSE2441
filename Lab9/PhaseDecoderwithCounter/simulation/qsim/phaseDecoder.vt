// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/07/2014 19:46:17"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    phaseDecoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module phaseDecoder_vlg_sample_tst(
	Clear,
	CLK,
	sampler_tx
);
input  Clear;
input  CLK;
output sampler_tx;

reg sample;
time current_time;
always @(Clear or CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module phaseDecoder_vlg_check_tst (
	P0,
	P1,
	P2,
	P3,
	P4,
	P5,
	sampler_rx
);
input  P0;
input  P1;
input  P2;
input  P3;
input  P4;
input  P5;
input sampler_rx;

reg  P0_expected;
reg  P1_expected;
reg  P2_expected;
reg  P3_expected;
reg  P4_expected;
reg  P5_expected;

reg  P0_prev;
reg  P1_prev;
reg  P2_prev;
reg  P3_prev;
reg  P4_prev;
reg  P5_prev;

reg  P0_expected_prev;
reg  P1_expected_prev;
reg  P2_expected_prev;
reg  P3_expected_prev;
reg  P4_expected_prev;
reg  P5_expected_prev;

reg  last_P0_exp;
reg  last_P1_exp;
reg  last_P2_exp;
reg  last_P3_exp;
reg  last_P4_exp;
reg  last_P5_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	P0_prev = P0;
	P1_prev = P1;
	P2_prev = P2;
	P3_prev = P3;
	P4_prev = P4;
	P5_prev = P5;
end

// update expected /o prevs

always @(trigger)
begin
	P0_expected_prev = P0_expected;
	P1_expected_prev = P1_expected;
	P2_expected_prev = P2_expected;
	P3_expected_prev = P3_expected;
	P4_expected_prev = P4_expected;
	P5_expected_prev = P5_expected;
end



// expected P0
initial
begin
	P0_expected = 1'bX;
end 

// expected P1
initial
begin
	P1_expected = 1'bX;
end 

// expected P2
initial
begin
	P2_expected = 1'bX;
end 

// expected P3
initial
begin
	P3_expected = 1'bX;
end 

// expected P4
initial
begin
	P4_expected = 1'bX;
end 

// expected P5
initial
begin
	P5_expected = 1'bX;
end 
// generate trigger
always @(P0_expected or P0 or P1_expected or P1 or P2_expected or P2 or P3_expected or P3 or P4_expected or P4 or P5_expected or P5)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected P0 = %b | expected P1 = %b | expected P2 = %b | expected P3 = %b | expected P4 = %b | expected P5 = %b | ",P0_expected_prev,P1_expected_prev,P2_expected_prev,P3_expected_prev,P4_expected_prev,P5_expected_prev);
	$display("| real P0 = %b | real P1 = %b | real P2 = %b | real P3 = %b | real P4 = %b | real P5 = %b | ",P0_prev,P1_prev,P2_prev,P3_prev,P4_prev,P5_prev);
`endif
	if (
		( P0_expected_prev !== 1'bx ) && ( P0_prev !== P0_expected_prev )
		&& ((P0_expected_prev !== last_P0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P0_expected_prev);
		$display ("     Real value = %b", P0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P0_exp = P0_expected_prev;
	end
	if (
		( P1_expected_prev !== 1'bx ) && ( P1_prev !== P1_expected_prev )
		&& ((P1_expected_prev !== last_P1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P1_expected_prev);
		$display ("     Real value = %b", P1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_P1_exp = P1_expected_prev;
	end
	if (
		( P2_expected_prev !== 1'bx ) && ( P2_prev !== P2_expected_prev )
		&& ((P2_expected_prev !== last_P2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P2_expected_prev);
		$display ("     Real value = %b", P2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_P2_exp = P2_expected_prev;
	end
	if (
		( P3_expected_prev !== 1'bx ) && ( P3_prev !== P3_expected_prev )
		&& ((P3_expected_prev !== last_P3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P3_expected_prev);
		$display ("     Real value = %b", P3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_P3_exp = P3_expected_prev;
	end
	if (
		( P4_expected_prev !== 1'bx ) && ( P4_prev !== P4_expected_prev )
		&& ((P4_expected_prev !== last_P4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P4_expected_prev);
		$display ("     Real value = %b", P4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_P4_exp = P4_expected_prev;
	end
	if (
		( P5_expected_prev !== 1'bx ) && ( P5_prev !== P5_expected_prev )
		&& ((P5_expected_prev !== last_P5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P5_expected_prev);
		$display ("     Real value = %b", P5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_P5_exp = P5_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module phaseDecoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clear;
reg CLK;
// wires                                               
wire P0;
wire P1;
wire P2;
wire P3;
wire P4;
wire P5;

wire sampler;                             

// assign statements (if any)                          
phaseDecoder i1 (
// port map - connection between master ports and signals/registers   
	.Clear(Clear),
	.CLK(CLK),
	.P0(P0),
	.P1(P1),
	.P2(P2),
	.P3(P3),
	.P4(P4),
	.P5(P5)
);

// Clear
initial
begin
	Clear = 1'b0;
	Clear = #20000 1'b1;
	Clear = #940000 1'b0;
end 

// CLK
initial
begin
	CLK = 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
end 

phaseDecoder_vlg_sample_tst tb_sample (
	.Clear(Clear),
	.CLK(CLK),
	.sampler_tx(sampler)
);

phaseDecoder_vlg_check_tst tb_out(
	.P0(P0),
	.P1(P1),
	.P2(P2),
	.P3(P3),
	.P4(P4),
	.P5(P5),
	.sampler_rx(sampler)
);
endmodule

