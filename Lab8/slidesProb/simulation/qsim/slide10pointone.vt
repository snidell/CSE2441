// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/30/2014 21:13:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    slide10pointone
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module slide10pointone_vlg_sample_tst(
	Clear,
	Clock,
	X,
	sampler_tx
);
input  Clear;
input  Clock;
input  X;
output sampler_tx;

reg sample;
time current_time;
always @(Clear or Clock or X)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module slide10pointone_vlg_check_tst (
	Z1,
	Z2,
	sampler_rx
);
input  Z1;
input  Z2;
input sampler_rx;

reg  Z1_expected;
reg  Z2_expected;

reg  Z1_prev;
reg  Z2_prev;

reg  Z1_expected_prev;
reg  Z2_expected_prev;

reg  last_Z1_exp;
reg  last_Z2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Z1_prev = Z1;
	Z2_prev = Z2;
end

// update expected /o prevs

always @(trigger)
begin
	Z1_expected_prev = Z1_expected;
	Z2_expected_prev = Z2_expected;
end



// expected Z1
initial
begin
	Z1_expected = 1'bX;
end 

// expected Z2
initial
begin
	Z2_expected = 1'bX;
end 
// generate trigger
always @(Z1_expected or Z1 or Z2_expected or Z2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Z1 = %b | expected Z2 = %b | ",Z1_expected_prev,Z2_expected_prev);
	$display("| real Z1 = %b | real Z2 = %b | ",Z1_prev,Z2_prev);
`endif
	if (
		( Z1_expected_prev !== 1'bx ) && ( Z1_prev !== Z1_expected_prev )
		&& ((Z1_expected_prev !== last_Z1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z1_expected_prev);
		$display ("     Real value = %b", Z1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Z1_exp = Z1_expected_prev;
	end
	if (
		( Z2_expected_prev !== 1'bx ) && ( Z2_prev !== Z2_expected_prev )
		&& ((Z2_expected_prev !== last_Z2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z2_expected_prev);
		$display ("     Real value = %b", Z2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z2_exp = Z2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module slide10pointone_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clear;
reg Clock;
reg X;
// wires                                               
wire Z1;
wire Z2;

wire sampler;                             

// assign statements (if any)                          
slide10pointone i1 (
// port map - connection between master ports and signals/registers   
	.Clear(Clear),
	.Clock(Clock),
	.X(X),
	.Z1(Z1),
	.Z2(Z2)
);

// Clear
initial
begin
	Clear = 1'b0;
	Clear = #100000 1'b1;
	Clear = #560000 1'b0;
end 

// Clock
initial
begin
	Clock = 1'b0;
	Clock = #40000 1'b1;
	Clock = #40000 1'b0;
	Clock = #40000 1'b1;
	Clock = #40000 1'b0;
	Clock = #40000 1'b1;
	Clock = #40000 1'b0;
	Clock = #40000 1'b1;
	Clock = #40000 1'b0;
	Clock = #40000 1'b1;
	Clock = #40000 1'b0;
	Clock = #40000 1'b1;
	Clock = #40000 1'b0;
	Clock = #40000 1'b1;
	Clock = #40000 1'b0;
end 

// X
initial
begin
	X = 1'b0;
	X = #180000 1'b1;
	X = #160000 1'b0;
	X = #80000 1'b1;
	X = #80000 1'b0;
end 

slide10pointone_vlg_sample_tst tb_sample (
	.Clear(Clear),
	.Clock(Clock),
	.X(X),
	.sampler_tx(sampler)
);

slide10pointone_vlg_check_tst tb_out(
	.Z1(Z1),
	.Z2(Z2),
	.sampler_rx(sampler)
);
endmodule

